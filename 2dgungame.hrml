<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Two-Player Shooting Game</title>
  <style>
    body {
      margin: 0;
      background: linear-gradient(to bottom, #87CEEB, #4682B4); /* Enhanced background */
      font-family: Arial, sans-serif;
      overflow: hidden;
    }

    #game {
      position: relative;
      width: 100vw;
      height: 100vh;
      display: flex;
      justify-content: space-between;
      align-items: flex-end;
    }

    .platform {
      width: 150px;
      height: 20px;
      background-color: #333;
      position: absolute;
      bottom: 0;
    }

    #platform1 {
      left: 10%;
    }

    #platform2 {
      right: 10%;
    }

    .player {
      width: 80px;
      position: absolute;
    }

    #player1 {
      left: calc(10% + 35px);
      bottom: 20px;
    }

    #player2 {
      right: calc(10% + 35px);
      bottom: 20px;
    }

    .gun {
      position: absolute;
      width: 50px;
      height: auto;
      transition: bottom 0.1s ease-out;
    }

    #gun1 {
      left: calc(10% + 35px + 15px); /* Positioned relative to Player 1 */
      bottom: 50px; /* Centered gun vertically with player */
    }

    #gun2 {
      right: calc(10% + 35px + 15px); /* Positioned relative to Player 2 */
      bottom: 50px; /* Centered gun vertically with player */
    }

    .block-shield {
      width: 100px;
      height: 100px;
      position: absolute;
      display: none;
      z-index: 1; /* Shield is above the player */
    }

    #shield1 {
      left: calc(10% + 15px);
      bottom: 0;
    }

    #shield2 {
      right: calc(10% + 15px);
      bottom: 0;
    }

    .bullet {
      width: 10px;
      height: 10px;
      background-color: black;
      position: absolute;
      display: none;
      border-radius: 50%;
    }

    .health-bar-container {
      position: absolute;
      width: 150px;
      height: 15px;
      background-color: #ccc;
      border: 2px solid #222;
    }

    .health {
      height: 100%;
      background-color: green;
    }

    #health1-container {
      left: 10%;
      top: 10px;
    }

    #health2-container {
      right: 10%;
      top: 10px;
    }

    #game-over {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.8);
      color: white;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      font-size: 2em;
      display: none;
    }

    .decorative-img {
      position: absolute;
      width: 200px;
      height: auto;
      opacity: 0.5;
    }

    #decor1 {
      left: 5%;
      top: 30%;
    }

    #decor2 {
      right: 5%;
      top: 30%;
    }
  </style>
</head>
<body>
  <div id="game">
    <!-- Platforms -->
    <div id="platform1" class="platform"></div>
    <div id="platform2" class="platform"></div>

    <!-- Decorative Images -->
    <img id="decor1" class="decorative-img" src="https://i.ibb.co/HppTZv4/Activate-shield.png" alt="Decorative Left">
    <img id="decor2" class="decorative-img" src="https://i.ibb.co/Hxnw9DJ/Activate-shield-1.png" alt="Decorative Right">

    <!-- Players -->
    <img id="player1" class="player" src="https://i.ibb.co/6N2dCCH/Untitled-design-17.png" alt="Player 1">
    <img id="player2" class="player" src="https://i.ibb.co/WV83zt8/Untitled-design-18.png" alt="Player 2">

    <!-- Guns -->
    <img id="gun1" class="gun" src="https://i.ibb.co/CsWwvcg/Untitled-design-20.png" alt="Gun Player 1">
    <img id="gun2" class="gun" src="https://i.ibb.co/GQc3YVd/Untitled-design-19.png" alt="Gun Player 2">

    <!-- Block Shields -->
    <img id="shield1" class="block-shield" src="https://i.ibb.co/Fh3V1Yx/Untitled-design-21.png" alt="Shield 1">
    <img id="shield2" class="block-shield" src="https://i.ibb.co/Fh3V1Yx/Untitled-design-21.png" alt="Shield 2">

    <!-- Bullets -->
    <div id="bullet1" class="bullet"></div>
    <div id="bullet2" class="bullet"></div>

    <!-- Health Bars -->
    <div id="health1-container" class="health-bar-container">
      <div id="health1" class="health"></div>
    </div>
    <div id="health2-container" class="health-bar-container">
      <div id="health2" class="health"></div>
    </div>

    <!-- Game Over Screen -->
    <div id="game-over">
      <p id="winner-text"></p>
      <p>Press "E" to Restart</p>
    </div>
  </div>

  <script>
    const player1 = document.getElementById("player1");
    const player2 = document.getElementById("player2");
    const gun1 = document.getElementById("gun1");
    const gun2 = document.getElementById("gun2");
    const shield1 = document.getElementById("shield1");
    const shield2 = document.getElementById("shield2");
    const bullet1 = document.getElementById("bullet1");
    const bullet2 = document.getElementById("bullet2");
    const health1 = document.getElementById("health1");
    const health2 = document.getElementById("health2");
    const gameOverScreen = document.getElementById("game-over");
    const winnerText = document.getElementById("winner-text");

    let health1Value = 100;
    let health2Value = 100;
    let isJumping1 = false;
    let isJumping2 = false;
    let gameActive = true;
    let shieldActive1 = false;
    let shieldActive2 = false;

    function updateGunPosition() {
      gun1.style.left = `${parseFloat(player1.style.left) + 35}px`;
      gun1.style.bottom = `${parseFloat(player1.style.bottom) + 50}px`;

      gun2.style.right = `${parseFloat(player2.style.right) + 35}px`;
      gun2.style.bottom = `${parseFloat(player2.style.bottom) + 50}px`;
    }

    function updateShieldPosition() {
      shield1.style.left = `${parseFloat(player1.style.left) + 15}px`;
      shield1.style.bottom = `${parseFloat(player1.style.bottom) - 10}px`;

      shield2.style.right = `${parseFloat(player2.style.right) + 15}px`;
      shield2.style.bottom = `${parseFloat(player2.style.bottom) - 10}px`;
    }

    function blockAbility(shield, player) {
      if (player === 1) {
        shield1.style.display = "block";
        shieldActive1 = true;
        setTimeout(() => {
          shield1.style.display = "none";
          shieldActive1 = false;
        }, 7000);
      } else if (player === 2) {
        shield2.style.display = "block";
        shieldActive2 = true;
        setTimeout(() => {
          shield2.style.display = "none";
          shieldActive2 = false;
        }, 7000);
      }
    }

    function updateHealth(healthElement, healthValue, player) {
      healthElement.style.width = `${healthValue}%`;

      if (healthValue <= 0) {
        gameOverScreen.style.display = "flex";
        winnerText.textContent = player === "Player 1" ? "Player 2 Wins!" : "Player 1 Wins!";
        gameActive = false;
      }
    }

    function resetGame() {
      health1Value = 100;
      health2Value = 100;
      updateHealth(health1, health1Value, "Player 1");
      updateHealth(health2, health2Value, "Player 2");
      gameOverScreen.style.display = "none";
      gameActive = true;
    }

    document.addEventListener("keydown", (e) => {
      if (!gameActive) {
        if (e.key === "e") resetGame();
        return;
      }

      if (e.key === "w") jump(player1); // Player 1 jump
      if (e.key === "ArrowUp") jump(player2); // Player 2 jump
      if (e.key === "f") shootBullet(bullet1, player1, player2, 1, () => health2Value -= 10);
      if (e.key === ".") shootBullet(bullet2, player2, player1, -1, () => health1Value -= 10);
      if (e.key === "d") blockAbility(shield1, 1);
      if (e.key === "/") blockAbility(shield2, 2);
    });

    function shootBullet(bullet, shooter, target, direction, onHit) {
      if (bullet.style.display === "block") return;

      const shooterRect = shooter.getBoundingClientRect();
      bullet.style.display = "block";
      bullet.style.left = `${shooterRect.left + shooterRect.width / 2}px`;
      bullet.style.top = `${shooterRect.top + shooterRect.height / 2}px`;

      const interval = setInterval(() => {
        const currentLeft = parseInt(bullet.style.left);
        bullet.style.left = `${currentLeft + direction * 10}px`;

        const bulletRect = bullet.getBoundingClientRect();
        const targetRect = target.getBoundingClientRect();

        if (
          bulletRect.right > targetRect.left &&
          bulletRect.left < targetRect.right &&
          bulletRect.bottom > targetRect.top &&
          bulletRect.top < targetRect.bottom
        ) {
          if (shieldActive1 && shooter === player2 || shieldActive2 && shooter === player1) {
            bullet.style.display = "none";
            clearInterval(interval);
            return;
          }
          bullet.style.display = "none";
          clearInterval(interval);
          onHit();
          updateHealth(target === player1 ? health1 : health2, target === player1 ? health1Value : health2Value, target === player1 ? "Player 1" : "Player 2");
        }

        if (bulletRect.left < 0 || bulletRect.left > window.innerWidth) {
          bullet.style.display = "none";
          clearInterval(interval);
        }
      }, 10);
    }

    function jump(player) {
      if ((player === player1 && isJumping1) || (player === player2 && isJumping2)) return;

      const originalBottom = parseInt(player.style.bottom || 20);
      let up = true;
      let jumpHeight = 0;

      const interval = setInterval(() => {
        if (up) {
          jumpHeight += 5;
          if (jumpHeight >= 100) up = false;
        } else {
          jumpHeight -= 5;
          if (jumpHeight <= 0) {
            clearInterval(interval);
            if (player === player1) isJumping1 = false;
            if (player === player2) isJumping2 = false;
          }
        }

        player.style.bottom = `${originalBottom + jumpHeight}px`;
        updateGunPosition();
        updateShieldPosition();
      }, 20);

      if (player === player1) isJumping1 = true;
      if (player === player2) isJumping2 = true;
    }
  </script>
</body>
</html>
